1. shortcut key change language in Ubuntu (Window + Space)
2. Create file in Ubuntu (touch + namefile.tail)

3. Trong JS co 3 loai module:
- Module tu build
- Module so san trong NodeJS
- Module phai down ve cac pakage moi su dung duoc.

-Khi minh require 1 module thi nodejs se tim trong folder cua minh truoc
--> xem co module do hay khong.
--> neu khong co thi no moi tim trong folder node_modules

- hideEchoBack: true, --> dung de an nhung gi user nhap vao thanh dau *

------------------------------------------------------------
Task32:
JSON object
1. stringify - Convert an object to a JSON string.
2. parse - Convert a JSON string to an Obejct.

------------------------------------------------------------
05/09/2020
Taks33: Ternary operator
- toss: tung
- coin: dong` xu
- statement: bieu thuc
- ternary operator: toan tu bac 3

- initial : ban dau
- otherwise: neu khong thi
- "use strict": su dung nghiem ngat

Taks36: Switch Case
- bronze: dong
- silver: bac
- gold: vang
- diamond: kim cuong

- tier: tang, rank

------------------------------------------------------------
06/09/2020
Taks33: Student Manager App

- npm install nameModule --save

- 1 chuc nang gi do = 1 function
- save file o buoc 3
- tao object truoc khi save --> khi save file chi can stringify laji object do thoi

files CSV:
    [
    name, classRoom, gender
    Hoang, 58th1, male
    Tien, 58th2, male
    Thoa, 58th1, female
    ]

--
document format dc files josn luon ne... ahihi
---------------------------------------------------
Task 39 - Sync & Async
Sync : đồng bộ
Async: bất đồng bộ

VD:
readFileSync - đọc file động bộ từ trên xuống
readFile - đọc file bất đồng bộ

callback : là 1 function được gọi trong param.

- Ngta thường using async nhiều hơn sync bởi vì async chạy bất đồng bộ
    --> giúp tiết kiệm time hơn.
    --> những thằng sau k phải chờ nó run xong mới run.

-------------------------------------
Task 40: Callback Hell : Dia nguc goi lai.
Callback hell: giong nhu 1 kim tu thap vay do'
>
 >
  >
   > --> nhu vay ne.
  >
 >
>
--> callback hell hoi xua ngta hay dung --> nhung gio it ng dung vi kho' nhin`.

--> De handling callback hell --> ngta using "Promise".

-------------------------------------
Task 41: Promise - Loi hua'

- readFile || readFileSync --> default encoding: null
- writeFile || writeFileSync --> default encoding: utf8

.then.catch --> Promise

- Promise la 1 constructor function
VD: var promise = new Promise

- return fs.readFile(path, 'utf8') --> tra ve 1 cai Promise

- 1 Promise co 3 trang thai:
+ Pending (đang xử lý)
+ Fulfilled (đã hoàn thành)
+ Rejected (đã bị từ chối)

- then: sau do
- catch: bat' lay'

- Promise duoc tao ra chinh la: .then vs .catch

- Dung Promise tu tao
--> tao function --> tra ve 'return new Promise' --> call reslove vs reject  
--> using:  .then vs .catch

-------------------------------------
Task 42: Promise.all
- iterable: có thể lặp lại

-------------------------------------
Task 43: 
- declare: khai bao'
- function*()  --> //generator function --> tao ham
- yield: san pham, vat pham, trinh bay ra, dua ra, ...

- co(function*(){...}) --> return Promise
- var readFiles = co.wrap(function*(files)){...}) --> return fucntion
+ files: là 1 array gồm những path đến file.


-------------------------------------   
Task 44:  asynv await
Promise --> node co --> async await

- async await --> return 1 Promise
- node co nó có syntax na ná với async await. co là 1 function, yield là keyword, async await là keyword.

-------------------------------------
Task 45:  setTimeout
setTimeout(fn, time)
time = calculator miliseconds
wait time done --> run function().
- thực ra cái miliseconds này k chuẩn --> because ...

---
setTimeout(function(){ //anonymous function - hàm không tên.
    console.log('2');
}, 2000);
console.log('3');
- thực ra cái hàm k tên là bởi vì nó chỉ chạy ở đó thôi
- nó k thể được gọi lại ở chổ khác.
- còn hàm có tên thì nó có thể được gọi lại
---
- setTimeout --> return 1 cái id
- clearTimeout(timeoutId);
--> khi code chạy đến chổ clearTimeout ý --> mà hàm setTimeout chưa chạy hoặc chưa chạy xong thì nó sẽ bị hủy.

-------------------------------------
Task 46:  setInterval

-------------------------------------
Task 47: Date Object
new Date();
new Date(value);
new Date(dateString);
new Date(year, month[, date[, hours[, minutes[, seconds[, milliseconds]]]]]);

- thư viện moment.js nó có thêm nheief methods giúp làm những cái mà bên object Date() không có

-------------------------------------
Task 48: Scope (global vs local)
- Trong lập trình trnahs thay đổi biến đầu vào (variable input)
    --> Tránh những lồi logic khó hiểu mà k biết nó sai ở đâu.

-------------------------------------
Task 49: Database Design (Basic)
- id: identifier - định danh
- Qua JS Advanced.